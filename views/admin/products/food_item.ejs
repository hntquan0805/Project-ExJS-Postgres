<tr id="product-row-<%= product.id %>" class="product-row">
  <!-- Product Id -->
  <td class="product-id text-center" style="width: 2%;">
    <%= product.id %>
  </td>

  <!-- Product Image -->
  <td style="width: 10%;">
    <a class="product-details-link d-flex justify-content-center" href="/admin/products/<%= product.id %>">
      <img class="product-img img-fluid rounded" width="100px" src="/img/food/menu-<%= product.id % 8 + 1 %>.jpg" alt="Product Image">
    </a>
  </td>

  <!-- Product Name -->
  <td style="width: 13%;" class="editable">
    <span class="product-name"><%= product.name %></span>
    <input type="text" class="product-name-input form-control d-none p-1" value="<%= product.name %>" style="width: 100%; font-size: small;">
  </td>

  <!-- Product Price -->
  <td style="width: 8%;" class="editable text-end">
    <span class="product-price">$<%= product.price %></span>
    <input type="number" class="product-price-input form-control text-end d-none p-1" min="0" value="<%= product.price %>" style="width: 100%; font-size: small;">
  </td>

  <!-- Product Status -->
  <td style="width: 12%;" class="editable text-end">
    <span class="product-status"><%= product.status === "in_stock" ? "In Stock" : "Out of Stock" %></span>
    <select class="product-status-input form-control d-none p-1" style="width: 100%; font-size: small;" value=<%= product.status === 'in_stock' %>> 
      <option class="product-status-in-stock" value="in_stock" <%= product.status === 'in_stock' ? 'selected' : '' %>>In Stock</option>
      <option class="product-status-out-of-stock" value="out_of_stock" <%= product.status === 'out_of_stock' ? 'selected' : '' %>>Out of Stock</option>
    </select>
  </td>

  <!-- Product Description -->
  <td style="width: 25%;" class="editable">
    <span class="product-description"><%= product.description %></span>
    <textarea class="product-description-input form-control d-none p-1" style="width: 100%; height: 195px; font-size: small;"><%= product.description %></textarea>
  </td>

  <!-- Product Categories -->
  <td style="width: 25%;">
    <div class="product-categories">
      <% product.category.forEach(category => { %>
      <%- include('../../partials/admin/admin_category_badge', {category : category}) %>
      <% }); %>
    </div>
    <!-- Add input and button (hidden by default) -->
    <div class="category-add d-flex mt-2 d-none">
      <input class="form-control flex-grow-1 p-1" style="font-size: small;" type="text" placeholder="Enter category"></input>
      <button class="btn btn-sm btn-outline-secondary flex-shrink-1 btn-square mx-1 p-1" style="font-size: small;" onclick="addCategory(this)">
        <%- include('../../partials/icons/add_icon') %>
      </button>
    </div>
  </td>

  <!-- Product Actions -->
  <td class="product-actions" style="width: 5%;">
    <div class="w-100 d-flex flex-column align-items-center gap-1">
      <!-- Edit button -->
      <button class="edit-btn btn-square btn btn-sm btn-outline-secondary p-1" onclick="editProduct(this)">
        <%- include('../../partials/icons/edit_icon') %>
      </button>
      <!-- Save button (hidden by default) -->
      <button class="save-btn btn-square btn btn-sm btn-outline-success d-none p-1" onclick="saveProductChanges(this)">
        <%- include('../../partials/icons/save_icon') %>
      </button>
      <!-- Remove button (hidden by default)-->
      <button class="remove-btn btn-square btn btn-sm btn-outline-danger d-none p-1" onclick="removeProduct(this)">
        <%- include('../../partials/icons/trash_icon') %>
      </button>
      <!-- Cancel button (hidden by default) -->
      <button class="cancel-btn btn-square btn btn-sm btn-outline-secondary d-none p-1" onclick="cancelEdit(this)">
        <%- include('../../partials/icons/revert_icon') %>
      </button>
    </div>
  </td>

  <template id="category-badge-template">
    <%- include('../../partials/admin/admin_category_badge', {category : "{{category}}"}) %>
  </template>
</tr>

<script>
  function toggleEditMode(productId) {
    const row = document.getElementById('product-row-' + productId);
    const nameSpan = row.querySelector('.product-name');
    const nameInput = row.querySelector('.product-name-input');
    const priceSpan = row.querySelector('.product-price');
    const priceInput = row.querySelector('.product-price-input');
    const descriptionSpan = row.querySelector('.product-description');
    const descriptionTextarea = row.querySelector('.product-description-input');
    const statusSpan = row.querySelector('.product-status');
    const statusInput = row.querySelector('.product-status-input');
    const editButton = row.querySelector('.edit-btn');
    const saveButton = row.querySelector('.save-btn');
    const removeButton = row.querySelector('.remove-btn');
    const cancelEditButton = row.querySelector('.cancel-btn');
    const categoryRemoveButtons = row.querySelectorAll('.category-remove');
    const categoryAdd = row.querySelector('.category-add');

    // Toggle visibility of spans and inputs
    nameSpan.classList.toggle('d-none');
    nameInput.classList.toggle('d-none');

    priceSpan.classList.toggle('d-none');
    priceInput.classList.toggle('d-none');

    descriptionSpan.classList.toggle('d-none');
    descriptionTextarea.classList.toggle('d-none');

    statusSpan.classList.toggle('d-none');
    statusInput.classList.toggle('d-none');

    // Toggle visibility of edit and save buttons
    editButton.classList.toggle('d-none');
    saveButton.classList.toggle('d-none');
    cancelEditButton.classList.toggle('d-none');
    removeButton.classList.toggle('d-none');

    // Toggle visibility of category buttons
    categoryRemoveButtons.forEach(button => {
      button.classList.toggle('d-none');
    });

    categoryAdd.classList.toggle('d-none');
  }

  function editProduct(button) {
    const row = button.closest('.product-row');
    const productId = row.id.split('-').pop();

    // Save original data
    const nameInput = row.querySelector('.product-name-input');
    const priceInput = row.querySelector('.product-price-input');
    const descriptionTextarea = row.querySelector('.product-description-input');
    const statusInput = row.querySelector('.product-status-input');

    // List of categories
    const categories = [];
    row.querySelectorAll('.category-badge-link').forEach(category => {
      categories.push(category.textContent);
    });

    nameInput.dataset.originalValue = nameInput.value;
    priceInput.dataset.originalValue = priceInput.value;
    descriptionTextarea.dataset.originalValue = descriptionTextarea.value;
    statusInput.dataset.originalValue = statusInput.value;
    row.dataset.originalCategories = JSON.stringify(categories);

    toggleEditMode(productId);
  }

  function saveProductChanges(button) {
    const productId = button.closest('.product-row').id.split('-').pop();
    const row = document.getElementById('product-row-' + productId);
    const nameSpan = row.querySelector('.product-name');
    const priceSpan = row.querySelector('.product-price');
    const descriptionSpan = row.querySelector('.product-description');
    const statusSpan = row.querySelector('.product-status');
    const nameInput = row.querySelector('.product-name-input');
    const priceInput = row.querySelector('.product-price-input');
    const descriptionTextarea = row.querySelector('.product-description-input');
    const statusInput = row.querySelector('.product-status-input');

    // Update the span elements with the input values
    nameSpan.textContent = nameInput.value;
    priceSpan.textContent = '$' + priceInput.value;
    descriptionSpan.textContent = descriptionTextarea.value;
    statusSpan.textContent = statusInput.options[statusInput.selectedIndex].text;

    // List of categories
    const categories = [];
    row.querySelectorAll('.category-badge-link').forEach(category => {
      categories.push(category.textContent);
    });

    toggleEditMode(productId);

    // Save it all
    const productData = {
      id: productId,
      name: nameInput.value,
      price: priceInput.value,
      description: descriptionTextarea.value,
      category: categories,
      status: statusInput.value
    };

    updateProduct(productData);
  }

  async function updateProduct(productData) {
    const response = await fetch(`/products/update`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(productData),
    });

    if (!response.ok) {
      console.error(`Error updating product: ${response.err || response}`);
      return;
    }
    console.log('Update product successfully');
  }

  function removeCategory(button) {
    const categoryBadge = button.closest('.category-badge');
    categoryBadge.remove();
  }

  function addCategory(button) {
    const row = button.closest('.product-row');
    const newCategory = row.querySelector('.category-add input').value;
    // Validation
    if (newCategory.length === 0) {
      return;
    }
    const template = document.getElementById('category-badge-template');
    const clone = template.content.cloneNode(true);
    const categoryBadge = clone.querySelector('.category-badge');
    const categoryBadgeLink = clone.querySelector('.category-badge-link');
    const categoryRemoveButton = clone.querySelector('.category-remove');
    categoryBadgeLink.textContent = newCategory;
    categoryBadgeLink.href = '/admin/products?category=' + newCategory;
    categoryRemoveButton.onclick = function() {
      removeCategory(this);
    };
    categoryRemoveButton.classList.remove('d-none');
    const categoryContainer = row.querySelector('.category-add');
    categoryContainer.insertAdjacentElement('beforebegin', categoryBadge);
  }

  function cancelEdit(button) {
    const row = button.closest('.product-row');
    const productId = row.id.split('-').pop();
    const nameInput = row.querySelector('.product-name-input');
    const priceInput = row.querySelector('.product-price-input');
    const descriptionTextarea = row.querySelector('.product-description-input');
    const statusInput = row.querySelector('.product-status-input');

    // Restore original data
    nameInput.value = nameInput.dataset.originalValue;
    priceInput.value = priceInput.dataset.originalValue;
    descriptionTextarea.value = descriptionTextarea.dataset.originalValue;
    statusInput.value = statusInput.dataset.originalValue;

    // Restore original categories
    const categories = JSON.parse(row.dataset.originalCategories);
    const categoryContainer = row.querySelector('.product-categories');
    categoryContainer.innerHTML = '';
    categories.forEach(category => {
      const template = document.getElementById('category-badge-template');
      const clone = template.content.cloneNode(true);
      const categoryBadge = clone.querySelector('.category-badge');
      const categoryBadgeLink = clone.querySelector('.category-badge-link');
      const categoryRemoveButton = clone.querySelector('.category-remove');
      categoryBadgeLink.textContent = category;
      categoryBadgeLink.href = '/admin/products?category=' + category;
      categoryRemoveButton.onclick = function() {
        removeCategory(this);
      };
      categoryRemoveButton.classList.remove('d-none');
      categoryContainer.appendChild(categoryBadge);
    });

    toggleEditMode(productId);
  }

  async function removeProduct(button) {
    const row = button.closest('.product-row');
    const productId = row.id.split('-').pop();

    // Remove the product from the database
    if (await deleteProduct(productId) < 0) {
      return;
    }

    // Self-destruct time
    row.remove();
  }

  async function deleteProduct(productId) {
    try {
      const response = await fetch(`/products/delete/${productId}`, {
        method: "POST",
      });

      if (!response.ok) {
        console.error(`Error deleting product: ${response.err || response}`);
        return -1;
      }
      console.log('Delete product successfully');
      return 0;
    } catch (err) {
      console.error(`Error deleting product: ${err}`);
      return -1;
    }
  }
</script>